{"version":3,"sources":["Components/Shops.tsx","Components/Account/Account.tsx","Components/Account/Register.tsx","Components/Account/Login.tsx","Components/Header.tsx","Components/Main.tsx","Components/Footer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Shops","react","React","Account","Register","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","username","password","email","registerAccount","bind","assertThisInitialized","data","fetch","method","headers","Accept","Content-Type","body","JSON","stringify","then","res","json","catch","error","console","onClick","Login","loginUser","Header","react_router_dom","to","react_router","exact","path","component","Main","Footer","App","Header_Header","Main_Main","Footer_Footer","Boolean","window","location","hostname","match","ReactDOM","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5481dd3b.chunk.js","sourcesContent":["import * as React from \"react\";\n// import * as ReactDOM from 'react-dom';\n// import { Route, BrowserRouter as Router, Link } from 'react-router-dom';\n\n\nexport default class Shops extends React.Component<any, any> {\n\trender() {\n\t  return (\n\t\t<div>\n\t\t  <div>Shops</div>\n\t\t</div>);\n\t}\n  }","import * as React from \"react\";\n// import * as ReactDOM from 'react-dom';\n// import { Route, BrowserRouter as Router, Link } from 'react-router-dom';\n\n\nexport default class Account extends React.Component<any, any> {\n\trender() {\n\t  return (\n\t\t<div>\n\t\t  <div>Account</div>\n\t\t</div>);\n\t}\n  }","import * as React from \"react\";\n// import { string } from \"prop-types\";\n\ninterface UserDataProps {\n    username: string;\n    password: string;\n    email: string;\n}\n\nexport default class Register extends React.Component implements UserDataProps {\n\n    username: string = \"larry11ww\"; \n    password: string = \"testpassword\";\n    email: string = \"emailss11@mail.com\";\n\n    constructor(props: any){\n        super(props);\n        \n        this.registerAccount = this.registerAccount.bind(this);\n    }\n\n    registerAccount(){\n        const data: object = {username: this.username, password: this.password, email: this.email};\n\n\n        fetch('/account/register', {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n            })\n            .then(res => res.json())\n            .catch(error => console.error(error));\n    }\n\n\t/*\n\t *  render DOM\n\t */\n\trender() {\n\t\treturn (\n            <div>\n                <h1>Register account</h1>\n                <span onClick={this.registerAccount}>Register account</span>\n            </div>\n\t\t)\n\t}\n}","import * as React from \"react\";\n\ninterface UserLoginProps {\n    username: string;\n    password: string;\n}\n\nexport default class Login extends React.Component implements UserLoginProps {\n\n\tusername: string = \"larry11ww\"; \n    password: string = \"testpassword\";\n\n\tconstructor(props: any) {\n\t\tsuper(props);\n\n\t\tthis.loginUser = this.loginUser.bind(this);\n\t}\n\n\tloginUser(){\n\n\t\tconst data: object = {username: this.username, password: this.password};\n\n\t\tfetch('/account/login', {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n            })\n            .then(res => res.json())\n            .catch(error => console.error(error));\n\n\t}\n\n\t/*\n\t *  render DOM\n\t */\n\trender() {\t\t\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1>Member login</h1>\n\t\t\t\t<span onClick={this.loginUser}>Login me</span>\n\t\t\t</div>\n\t\t)\n\t}\n}","import * as React from \"react\";\n// import * as ReactDOM from 'react-dom';\nimport { Route, BrowserRouter as Router, Link } from 'react-router-dom';\n// import { createBrowserHistory } from 'history';\nimport Shops from './Shops';\nimport Account from './Account/Account';\nimport Register from './Account/Register';\nimport Login from './Account/Login';\n\nexport default class Header extends React.Component<any, any> {\n\n\t/*\n\t *  render DOM\n\t */\n\trender() {\t\t\n\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<h1>Header component</h1>\n\n\t\t\t\t\n\n\t\t\t\t<Router>\n\t\t\t\t\t<Link to=\"/\">Home</Link>\n\t\t\t\t\t<Link to=\"/shops\">Shops</Link>\n\t\t\t\t\t<Link to=\"/account\">Account</Link>\n\t\t\t\t\t<Link to=\"/account/register\">Register</Link>\n\t\t\t\t\t<Link to=\"/account/login\">Login</Link>\n\t\t\t\t\t\n\t\t\t\t\t<Route exact path=\"/\" />\n\t\t\t\t\t<Route exact path=\"/shops\" component={Shops}/>\n\t\t\t\t\t<Route exact path=\"/account\" component={Account} />\n\t\t\t\t\t<Route exact path=\"/account/register\" component={Register} />\n\t\t\t\t\t<Route exact path=\"/account/login\" component={Login} />\n\t\t\t\t</Router>\n\t\t\t</React.Fragment>\n\t\t)\n\t}\n}","import * as React from \"react\";\n\nexport default class Main extends React.Component {\n\n\t/*\n\t *  render DOM\n\t */\n\trender() {\t\t\n\n\t\treturn (\n\t\t\t<h1>Main component</h1>\n\t\t)\n\t}\n}","import * as React from \"react\";\n\nexport default class Footer extends React.Component {\n\n\t/*\n\t *  render DOM\n\t */\n\trender() {\t\t\n\n\t\treturn (\n\t\t\t<h1>Footer component</h1>\n\t\t)\n\t}\n}","import * as React from \"react\";\n// import { Provider } from \"react-redux\";\n\n// Components\nimport Header from './Components/Header'\nimport Main from './Components/Main'\nimport Footer from './Components/Footer'\n// import store from './store'\n\n// style imports\n// import './App.css';\n\nexport default class App extends React.Component {\n\n    // state = {users: []}\n\n    // componentDidMount() {\n    //     fetch('/account/getuser')\n    //       .then(res => res.json())\n    //       .then(users => this.setState({ users }));\n    //   }\n\n\trender() {\n\t\treturn(\n            <React.Fragment>\n                <Header />\n                <Main />\n                <Footer />\n            </React.Fragment>\n\t\t)\t\t\n\t}\n\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}